//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULists_Sim.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

ListaS::ListaS(){
		longit = 0;
		ptr_elementos = NULO;
		mem = new CSMemoria();
}

ListaS::ListaS(CSMemoria* m){
  ptr_elementos=NULO;
  longit=0;
  mem=m;

}

/*
lista.inserta_primero( E TipoElemento)
Inicio // x tendria direcion de memoria si existe espacio
x=M.New_espacio(‘elemento,sig’)
si x <> nulo entonces
inicio
m.poner_dato(x,
’->elemento’
,E)
m.poner_dato(x,
’->sig’
,PtrElementos)
longitud=longitud + 1
PtrElementos = x
fin
caso contrario // llamar a exception existeespaciomemoria
Fin
*/


void ListaS::inserta_primero(int e){
  //mem->mostrar();       //sigNL = "->sig"
			//   datosNL="elemento.sig";     //elemNL=->elemento
 int x=mem->new_espacio(datosNL); //0    //Nulo=-1 ,ptr_elementos=-1
 if(x!=NULO){
   //poner_dato(dir,id,valor)
   mem->poner_dato(x,elemNL,e);
   //mem->mostrar();
   mem->poner_dato(x,sigNL,ptr_elementos);
   //mem->mostrar();
   ptr_elementos=x;
   longit++;

 }
 cout<< "ERROR:NO EXISTE ESPACIO EN LA MEMORIA\n";
}
}

