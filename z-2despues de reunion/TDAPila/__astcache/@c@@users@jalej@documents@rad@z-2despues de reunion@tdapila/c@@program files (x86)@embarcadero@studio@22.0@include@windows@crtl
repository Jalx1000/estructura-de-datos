 * _RESTRICT result);
struct tm * _RTLENTRY _EXPFUNC localtime_s(const time_t * _RESTRICT clock,
					   struct tm * _RESTRICT result);
#endif

char  *     _RTLENTRY _EXPFUNC asctime(const struct tm *__tblock);
char  *     _RTLENTRY _EXPFUNC asctime_r(const struct tm *__tblock, char *__buf);
char  *     _RTLENTRY _EXPFUNC ctime(const time_t *__time);
double      _RTLENTRY _EXPFUNC difftime(time_t __time2, time_t __time1);
struct tm * _RTLENTRY _EXPFUNC gmtime(const time_t *__timer);
struct tm * _RTLENTRY _EXPFUNC gmtime_r(const time_t *__clock, struct tm *result);
struct tm * _RTLENTRY _EXPFUNC localtime(const time_t *__timer);
struct tm * _RTLENTRY _EXPFUNC localtime_r(const time_t *__clock, struct tm *__result);
time_t      _RTLENTRY _EXPFUNC time(time_t *__timer);
time_t      _RTLENTRY _EXPFUNC mktime(struct tm *__timeptr);
clock_t     _RTLENTRY _EXPFUNC clock(void);
_SIZE_T     _RTLENTRY _EXPFUNC strftime(char *__s, _SIZE_T __maxsize,
                                        const char *__fmt, const struct tm *__t);
char  *     _RTLENTRY _EXPFUNC strptime(const char *__s,
                                        const char *__fmt, struct tm *__t);
_SIZE_T     _RTLENTRY _EXPFUNC _lstrftim(char  *__s, _SIZE_T __maxsize,
                                          const char *__fmt, const struct tm *__t);
wchar_t   * _RTLENTRY _EXPFUNC _wasctime(const struct tm *__tblock);
wchar_t   * _RTLENTRY _EXPFUNC _wasctime_r(const struct tm *__tblock, wchar_t *__buf);
wchar_t   * _RTLENTRY _EXPFUNC _wctime(const time_t *__time);
wchar_t   * _RTLENTRY _EXPFUNC _wstrdate(wchar_t *__datestr);
wchar_t   * _RTLENTRY _EXPFUNC _wstrtime(wchar_t *__timestr);
_SIZE_T     _RTLENTRY _EXPFUNC wcsftime(wchar_t *__s, _SIZE_T __maxsize,
                                        const wchar_t *__fmt, const struct tm *__t);
void        _RTLENTRY _EXPFUNC _wtzset(void);

extern int  _RTLENTRY _EXPDATA _daylight;
extern long _RTLENTRY _EXPDATA _timezone;

// FIXME: having const below causes CLANG to generate bad object file
#if !defined(__clang__)
extern char *    const _RTLENTRY _EXPDATA _tzname[2];
extern wchar_t * const _RTLENTRY _EXPDATA _wtzname[2];
#else
extern char *    _RTLENTRY _EXPDATA _tzname[3];
extern wchar_t * _RTLENTRY _EXPDATA _wtzname[3];
#endif

extern unsigned char     _RTLENTRY _EXPDATA _PREFER_END_STANDARD_TIME;
extern unsigned char     _RTLENTRY _EXPDATA _PREFER_START_DAYLIGHT_TIME;
#pragma obsolete _PREFER_END_STANDARD_TIME
#pragma obsolete _PREFER_START_DAYLIGHT_TIME

int         _RTLENTRY          stime(time_t *__tp);
void        _RTLENTRY _EXPFUNC _tzset(void);
char  *     _RTLENTRY _EXPFUNC _strdate(char *__datestr);
char  *     _RTLENTRY _EXPFUNC _strtime(char *__timestr);

#if !defined(__STDC__)
void        _RTLENTRY  _EXPFUNC tzset(void);

/* MSC compatible routines: */
unsigned int _RTLENTRY _EXPFUNC _getsystime(struct tm *__timeptr);
unsigned int _RTLENTRY _EXPFUNC _setsystime(struct tm *__timeptr, unsigned int __ms);

#endif  /* __STDC__  */

#ifdef __cplusplus
}
#endif

#if !defined(RC_INVOKED)

/* restore default packing */
#pragma pack(pop)

#if defined(__STDC__)
#pragma warn .nak
#endif

#endif  /* !RC_INVOKED */

#ifdef __cplusplus
} // std
#endif

#ifdef __cplusplus
#if __STDC_WANT_LIB_EXT1__
/* MS compatible overload */
extern "C++"
errno_t _RTLENTRY _EXPFUNC localtime_s(struct std::tm* _RESTRICT result,
                                       const std::time_t* _RESTRICT clock);
#endif
#endif

#endif  /* __TIME_H */

#if defined(__cplusplus) && !defined(__XUSING_CNAME__) && !defined(__TIME_H_USING_LIST)
#define __TIME_H_USING_LIST
     using std::time_t;
     using std::clock_t;
     using std::tm;
     using std::asctime;
     using std::asctime_r;
     using std::ctime;
     using std::difftime;
     using std::gmtime;
     using std::gmtime_r;
     using std::localtime;
     using std::localtime_r;
     using std::time;
     using std::mktime;
     using std::clock;
     using std::strftime;
     using std::strptime;
     using std::_lstrftim;
     using std::_wasctime;
     using std::_wasctime_r;
     using std::_wctime;
     using std::_wstrdate;
     using std::_wstrti